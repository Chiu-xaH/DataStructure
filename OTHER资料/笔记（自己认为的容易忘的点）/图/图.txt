遍历
	深度优先搜索遍历（DFS）：采用visited数组记录是否被访问过，未访问则递归，并循环每个点进行
	广度优先搜索遍历（BFS）：采用队列，访问过后入队尾并标记visited数组，然后出队头并打印，再根据出队的元素搜寻接下来没被访问过的点，再次入队，直到队空
最小生成树
	普里姆（Prim）算法：从初点开始找，选择最小权值的路，然后比较每次已到达点的相连的路的权值，选择小的，最后直到已到达所有的点
	克鲁斯卡尔（Kruskal）算法：建立新的数组保存每一条边的两点与权值，从权值最小的边开始，直到所有的点都到达
	稠密图PRIM  稀疏图 KRUSKAL
最短路径
	迪杰斯特拉（Dijkstra）算法：选择初点，然后将剩余的点列表格横行，纵列为循环次数（1~NodeNums-1），表格之填入权值（初始化第一次循环一列为无穷），然后找初点能通过一条边就到达的点们，比较权值与现有表格中的大小，若更小则更新，否则不动，完成一次循环后，选出一列最小数对应的顶点，纳入最短路径的点（纳入后不再参与下面循环），如此反复最后得到纳入最短路径的点按顺序走就是最短路径
	弗洛伊德（Floyd）算法：列出邻接矩阵，然后从初点开始作为中间点k，查看v到k到w所需的路径是否比上一次更小，若小则更新矩阵内容，直到所有的点全做过中间点，其中在每次变换更新时同时记录一个矩阵，存储v到w时，w的前一个点（最后生成的表通过不断查找前驱可得到完整的最短路径）
拓扑排序：有向图->拓扑序列
	AOV网：用图来表示工程，其中，用顶点表示活动；弧表示活动之间的制约关系
	AOE网：用图来表示工程：其中，用弧表示活动；用弧的权值表示活动的持续时间；用弧两端的顶点分别表示活动的开始和结束，即瞬间行为或事件。
	拓扑序列：AOV网不存在回路，”工程“能依次进行
	关键路径：从源点到汇点之间的最长的一条路径，同时也是整个”工程“所需要的至少时间

最小生成树求解算法时间复杂度对比		

时间复杂度	邻接矩阵		邻接表
DFS/BFS		O(V^2)		O(V+E)
拓扑排序		O(V^2)		O(V+E)
Dijkstra		O(V^2)		O(V^2)
Floyd		O(V^3)		O(V^3)
Prim			O(V^2)		O((V+E)logV)
Kruskal		O(ElogE)		O(ElogE)




稠密图用邻接矩阵，稀疏图用邻接表
稠密图PRIM  稀疏图 KRUSKAL

