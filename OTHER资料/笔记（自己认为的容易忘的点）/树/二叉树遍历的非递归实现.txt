前序遍历 根左右
中序遍历 左根右
后序遍历 左右根

二叉树遍历的非递归实现-借助栈
前序：
	压栈根结点
	while(栈不为空) {
		 出栈；
		 打印出栈结点；
	（注意：先右后左，因为栈是后进先出，保证左子树先被处理）
 		 如果出栈节点的右子树不为空：压栈
	 	 如果出栈节点的左子树不为空：压栈
	}
   

中序：
	tree = 根节点；
	while(tree不为空  或  栈不为空) {
		if(tree 不空){
			压栈tree；
			tree向左子树；
		}  else {
			出栈；
			打印出栈结点；
			tree向出栈的右子树；
		}
	}

后序：
	指针prv（记录上一个被访问的节点）
	指针tree = 根节点
	while(tree不为空  或  栈不为空) {
		if(tree不为空) {
			压栈tree;
			tree向左子树;
		} else {
			E = 得到栈顶元素(不弹出) ;
			if(E的右子树空  或  E的右子树==prv) {
				打印E;
				更新prv为E;
				出栈;
			} else {
				tree = E的右子树;
			}
		}
	}
