简单顺序查找O(n)
有序表查找：二分查找（改进版：插值查找）O(logn)

当二分查找树只剩两个元素时，选择最小的，然后第二个当右孩子（最后一层的叶子只能为父节点右孩子）
根节点为查找元素/2
结点上方标注范围，结点已取到的不算范围
范围（end+start）/2为结点值
查找长度为所在层数
n个元素最大查找长度为[log₂n]（取整）+1，易通过满二叉树推理

插值查找 O(log₂n)：𝑚𝑖𝑑 = 𝑙𝑜𝑤 + (𝑘𝑒𝑦 −𝐴[𝑙𝑜𝑤])/(𝐴[ℎ𝑖𝑔ℎ]−𝐴[𝑙𝑜𝑤])*(ℎ𝑖𝑔ℎ − 𝑙𝑜𝑤)
斐波那契查找
索引表查找
二叉排序树：
	删除：如果节点有两个子节点，则// 方法1寻找右子树最小节点//方法2 寻找左子树最大结点，代替要删除的结点，并删除寻找到的那个结点
平衡二叉树（AVL树）：
	左旋 逆时针旋转 冲突的左孩子变为旋转结点的右孩子
	右旋 顺时针旋转 冲突的右孩子变为旋转结点的左孩子
	速记：左正右负
	LL型 失衡结点的BF为2，失衡结点左孩子的BF为1 失衡结点右旋
	RR型 失衡结点的BF为-2，失衡结点右孩子的BF为-1 失衡结点左旋
	LR型 失衡结点的BF为2 失衡结点左孩子的BF为-1 失衡结点的左孩子进行左旋后，失衡结点右旋
	RL型 失衡结点的BF为-2，失衡结点右孩子的BF为1 失衡结点的右孩子进行右旋后，失衡结点左旋
	L+ R-  BF=Height(Tree->leftChild)-Height(Tree->rightChild)
	多个结点失衡，调节离插入结点最近的
B树（多路查找树）
m阶B树，一个节点最多m-1个元素
先查找到插入的位置进行插入，如果出现上溢出则中间元素（m/2）（若小数向上取整）上移，两边分裂，直到树中无上溢出
	2-3树 ：结点类型：2结点：两个孩子（或无孩子）、一个元素
				    3结点：三个孩子（或无孩子）、两个元素
	2-3-4树
B+树
红黑树
散列（哈希）表查找：
	函数构造：直接定址法、除留余数法、平方取中法、折叠法、数值分析法
	装填因子：a=n/m 其中n 为关键字个数，m为表长。
	处理冲突：开放定址法（寻找下个空散列地址）：线性检测、二次检测、伪随机数
			拉链法（链地址法）（冲突时接在后面组成链表）
			再散列法（启用另一个散列函数）
			公共溢出区法

平均查找长度（ASL）

二叉排序树ASL =【每一层的（层结点数*层序）】/总结点数
散列表线性探测ASL =（每个元素寻找空位若直接找到则为1，若冲突则为找的过程数）/总元素数
散列表拉链ASL = 同上